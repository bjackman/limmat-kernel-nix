{
  pkgs,
  writeShellApplication,
  writeText,
  makeWrapper,
  runCommand,
  stdenv,
  lib,

  # Dependency packages
  kselftests,
  test-runner,
}:
let
  # Helper function to create a test definition from a derivation
  mkTest = drv: {
    __is_test = true;
    command = [ "${drv}/bin/${drv.pname or drv.name}" ];
  };

  # Helper function to create a vmtest for a specific test type
  mkVmtest =
    testType:
    mkTest (writeShellApplication {
      name = "vmtests-${testType}";
      runtimeInputs = [
        kselftests
      ]
      ++ (with pkgs; [
        # run_vmtests.sh deps:
        bash
        gawk
        # General stuff for all the scripts (too hard to track all
        # dependencies)
        killall
        mount
        umount
        procps
      ]);
      text = ''
        cd ${kselftests}/bin/mm
        ./run_vmtests.sh -t ${testType}
      '';
    });

  # The lk-broken tag means it doesn't work in the vm provided by lk-vm (with
  # the kconfig provided by `lk-kconfig -f "base vm-boot kselftests`).
  # The slow tag means it's too slow for me to want to run it on every commit.

  # run_vmtests.sh is the wrapper script for the mm selftests. You can run the
  # whole thing via kselftests' crappy test runner but lots of the tests are
  # broken/flaky so you really only wanna run a subset. To do that via
  # kselftest you have to set KSELFTEST_RUN_VMTESTS_SH_ARGS but then you can't
  # set the -t arg to a string containing spaces. Easiest thing to do here is
  # just split it up into separate tests and always run a single sub-suite.
  # This is kinda wasteful because it means we run the setup/teardown more
  # often than necessary.
  # Note this is an incomplete list of the tests.
  vmtests.vmtests = {
    mmap = mkVmtest "mmap";
    # TODO: This fails because mkstemp()/unlink() run into a read-only
    # filesystem.
    gup_test = (mkVmtest "gup_test") // {
      tags = [ "lk-broken" ];
    };
    compaction = mkVmtest "compaction";
    # TODO: This needs CONFIG_TEST_VMALLOC=m in the kernel.
    vmalloc = mkVmtest "vmalloc" // {
      tags = [ "lk-broken" ];
    };
    cow = mkVmtest "cow";
    migration = mkVmtest "migration";
    # TODO: This fails because of "You need to compile page_frag_test module"
    # There seems to be a foible of run_vmtests.sh where it returns an error
    # when all tests are skipped.
    page_frag = mkVmtest "page_frag" // {
      tags = [ "lk-broken" ];
    };
    thp = mkVmtest "thp" // {
      # TODO: There is a bug in split_huge_page_test, the ksft_set_plan() call
      # is broken under my configuratoin leading to:
      # Planned tests != run tests (62 != 10)
      tags = [ "lk-broken" ];
    };
    hugetlb = mkVmtest "hugetlb" // {
      # Broken during 6.18 merge window
      # https://lore.kernel.org/all/20250926033255.10930-1-kartikey406@gmail.com/T/#u
      tags = [
        "slow"
        "lk-broken"
      ];
    };
  };

  # parse-kselftest-list will generate the actual list of kselftests, but also
  # here we add tags and stuff for the ones we know about. This gets merged into
  # the overal config below.
  kselftestsConfig.kselftests = {
    kvm = {
      dirty_log_perf_test.tags = [ "slow" ];
      demand_paging_test.tags = [ "slow" ];
      access_tracking_perf_test.tags = [ "slow" ];
      hardware_disable_test.tags = [ "slow" ];
      kvm_page_table_test.tags = [ "slow" ];
      memslot_modification_stress_test.tags = [ "slow" ];
      memslot_perf_test.tags = [ "slow" ];
      # This test runs a guest with 128GiB of RAM, it's not gonna work in our
      # puny little VM.
      mmu_stress_test.tags = [ "slow" "lk-broken" ];
      # This is just a bug in the vibe-coded test-runner, it squashes the tree
      # of tests into a flat hashmap with dot separators and thinks this is a
      # triply-nested definition. Somehow this leads to a bogus
      # run_kselftests.sh command.
      nx_huge_pages_test.sh = [ "lk-broken" ];
      # I think this one might just be an issue with running in a VM
      # Stage 2: L2 PT expiry TSC (3291811188) > L2 TSC deadline (3291391488)
      vmx_preemption_timer_test = [ "lk-broken" ];
    };
  };

  # Convert the tests config to JSON and store in nix store
  testsConfig = runCommand "tests-config.json" {
    nativeBuildInputs = [ pkgs.jq test-runner ];
  } ''
    test-runner parse-kselftest-list ${kselftests}/bin/kselftest-list.txt > kselftests.json
    # Combine the JSON generated from the Nix above, with the one generated by
    # parse-kselftest-list, but put the latter under the kselftests key.
    jq --slurp '.[0] + { "kselftests": .[1] } * .[2]' \
      ${writeText "vmtests.json" (builtins.toJSON vmtests)} \
      kselftests.json \
      ${writeText "vmtests.json" (builtins.toJSON kselftestsConfig)} \
      > $out
  '';

  # Create the wrapper that provides the config to test-runner
  ktests = stdenv.mkDerivation {
    pname = "ktests";
    version = "0.1.0";

    src = ./.;

    buildInputs = [ kselftests ];
    nativeBuildInputs = [ makeWrapper ];

    installPhase = ''
      mkdir -p $out/bin
      # The parse-kselftest-list result will generate JSON that expects to find
      # run_kselftest.sh in the PATH.
      makeWrapper ${test-runner}/bin/test-runner $out/bin/ktests \
        --add-flags "--test-config ${testsConfig}" \
        --prefix PATH : "${kselftests}/bin"
    '';
  };
in
# Just hang the config on the derivation as an extra attribute so it can be
# accessed directly for debugging and stuff.
ktests // { config = testsConfig; }
